---
- name: Clean up build dependencies and caches
  block:
    - name: Ensure Sliver binaries exist before cleanup
      ansible.builtin.stat:
        path: "{{ item }}"
      loop:
        - "{{ sliver_install_path }}/sliver-server"
        - "{{ sliver_install_path }}/sliver-client"
      register: sliver_binaries_check
      failed_when: not item.stat.exists
      become: true

    - name: Stop Sliver service before cleanup
      ansible.builtin.systemd:
        name: sliver
        state: stopped
      become: true
      when: sliver_setup_systemd | bool
      failed_when: false

    - name: Preserve Sliver binaries and configs
      ansible.builtin.shell: |
        # Create temp directory for preservation
        TEMP_DIR=$(mktemp -d)

        # Preserve binaries
        cp -p {{ sliver_install_path }}/sliver-server "${TEMP_DIR}/"
        cp -p {{ sliver_install_path }}/sliver-client "${TEMP_DIR}/"

        # Preserve configs if they exist
        if [ -d "{{ sliver_install_path }}/configs" ]; then
          cp -rp {{ sliver_install_path }}/configs "${TEMP_DIR}/"
        fi

        echo "${TEMP_DIR}"
      register: sliver_temp_preserve_dir
      become: true
      changed_when: true

    - name: Clean up Sliver source code and build artifacts
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - "{{ sliver_install_path }}/.git"
        - "{{ sliver_install_path }}/.github"
        - "{{ sliver_install_path }}/client"
        - "{{ sliver_install_path }}/server"
        - "{{ sliver_install_path }}/implant"
        - "{{ sliver_install_path }}/protobuf"
        - "{{ sliver_install_path }}/vendor"
        - "{{ sliver_install_path }}/go.mod"
        - "{{ sliver_install_path }}/go.sum"
        - "{{ sliver_install_path }}/Makefile"
        - "{{ sliver_install_path }}/Dockerfile"
        - "{{ sliver_install_path }}/.dockerignore"
        - "{{ sliver_install_path }}/.gitignore"
        - "{{ sliver_install_path }}/.tool-versions"
        - "{{ sliver_install_path }}/LICENSE"
        - "{{ sliver_install_path }}/README.md"
      become: true

    - name: Restore preserved binaries and configs
      ansible.builtin.shell: |
        # Restore binaries
        mv {{ sliver_temp_preserve_dir.stdout }}/sliver-server {{ sliver_install_path }}/
        mv {{ sliver_temp_preserve_dir.stdout }}/sliver-client {{ sliver_install_path }}/

        # Restore configs if they exist
        if [ -d "{{ sliver_temp_preserve_dir.stdout }}/configs" ]; then
          mv {{ sliver_temp_preserve_dir.stdout }}/configs {{ sliver_install_path }}/
        fi

        # Clean up temp directory
        rm -rf {{ sliver_temp_preserve_dir.stdout }}

        # Ensure correct permissions
        chown -R {{ sliver_username }}:{{ sliver_usergroup }} {{ sliver_install_path }}
        chmod +x {{ sliver_install_path }}/sliver-*
      become: true
      changed_when: true

    - name: Remove build-only packages for Debian-based systems
      ansible.builtin.apt:
        name: "{{ sliver_debian_build_packages }}"
        state: absent
        autoremove: true
        purge: true
      become: true
      when:
        - ansible_os_family == "Debian"
        - sliver_cleanup_remove_build_packages | bool

    - name: Remove build-only packages for RedHat-based systems
      ansible.builtin.dnf:
        name: "{{ sliver_el_build_packages }}"
        state: absent
        autoremove: true
      become: true
      when:
        - ansible_os_family == "RedHat"
        - sliver_cleanup_remove_build_packages | bool

    - name: Remove ASDF and Go installation
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - "{{ sliver_user_home }}/.asdf"
        - "{{ sliver_user_home }}/go"
        - "{{ sliver_user_home }}/.cache/go-build"
      become: true
      when: sliver_cleanup_remove_golang | bool

    - name: Remove unused packages and dependencies for Debian-based systems
      ansible.builtin.apt:
        autoremove: true
        autoclean: true
        purge: true
      become: true
      when:
        - ansible_os_family == "Debian"
        - sliver_cleanup_package_cache | bool

    - name: Clean apt package cache for Debian-based systems
      ansible.builtin.apt:
        clean: true
      become: true
      when:
        - ansible_os_family == "Debian"
        - sliver_cleanup_package_cache | bool

    - name: Clean temporary files and user caches
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - "/tmp/sliver*"
        - "/var/tmp/sliver*"
        - "{{ sliver_user_home }}/.cache"
      become: true
      when: sliver_cleanup_temp_files | bool

    - name: Start Sliver service after cleanup
      ansible.builtin.systemd:
        name: sliver
        state: started
      become: true
      when: sliver_setup_systemd | bool

  rescue:
    - name: Cleanup failed - attempting to restore service
      ansible.builtin.systemd:
        name: sliver
        state: started
      become: true
      when: sliver_setup_systemd | bool
      failed_when: false

    - name: Report cleanup failure
      ansible.builtin.fail:
        msg: "Cleanup failed. Please check the system state."
