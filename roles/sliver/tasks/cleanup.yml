---
- name: Clean up build environment
  when: sliver_cleanup | bool
  block:
    - name: Create list of packages to protect
      ansible.builtin.set_fact:
        sliver_protected_packages: "{{ (sliver_packages.essential | default([])) + (sliver_packages.runtime_debian | default([])) + ['python3', 'python3-minimal', 'libpython3-stdlib', 'python3-apt'] | unique }}"
      when: ansible_os_family == "Debian"

    - name: Hold runtime and essential packages before cleanup
      ansible.builtin.dpkg_selections:
        name: "{{ item }}"
        selection: hold
      loop: "{{ sliver_protected_packages }}"
      become: true
      when:
        - ansible_os_family == "Debian"
      failed_when: false

    - name: Remove build-time Go installation and caches
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop: "{{ sliver_cleanup_paths }}"
      become: true

    - name: Find non-binary files in sliver directory
      ansible.builtin.find:
        paths: "{{ sliver_install_path }}"
        file_type: file
        recurse: false
        excludes: "{{ sliver_keep_binaries }}"
      register: sliver_files_to_remove
      become: true

    - name: Remove non-binary files from sliver directory
      ansible.builtin.file:
        path: "{{ item.path }}"
        state: absent
      loop: "{{ sliver_files_to_remove.files }}"
      become: true

    - name: Remove source directories from sliver installation
      ansible.builtin.file:
        path: "{{ sliver_install_path }}/{{ item }}"
        state: absent
      loop: "{{ sliver_source_directories }}"
      become: true

    - name: Find empty directories in sliver path
      ansible.builtin.find:
        paths: "{{ sliver_install_path }}"
        file_type: directory
        recurse: true
      register: sliver_all_dirs
      become: true

    - name: Remove empty directories
      ansible.builtin.file:
        path: "{{ item.path }}"
        state: absent
      loop: "{{ sliver_all_dirs.files }}"
      when: item.size == 0
      become: true

    - name: Strip debug symbols from binaries
      ansible.builtin.command:
        cmd: "strip {{ sliver_install_path }}/{{ item }}"
      loop: "{{ sliver_keep_binaries }}"
      become: true
      changed_when: false
      failed_when: false

    - name: Check for unpacked compilers in .sliver directory
      ansible.builtin.stat:
        path: "{{ sliver_user_home }}/.sliver/{{ item }}"
      register: sliver_compilers
      loop:
        - go
        - zig
      become: true

    - name: Remove unpacked compilers if found
      ansible.builtin.file:
        path: "{{ item.stat.path }}"
        state: absent
      when: item.stat.exists
      loop: "{{ sliver_compilers.results }}"
      become: true

    - name: Gather package facts
      ansible.builtin.package_facts:
        manager: apt
      when: ansible_os_family == "Debian"
      become: true

    - name: Remove development packages (excluding protected)
      ansible.builtin.apt:
        name: "{{ sliver_cleanup_packages_debian }}"
        state: absent
        purge: true
        autoremove: true
      when: ansible_os_family == "Debian"
      become: true
      failed_when: false

    - name: Clean all cache directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop: "{{ (sliver_cleanup_paths + sliver_additional_cleanup_paths | default([])) | unique }}"
      become: true
      failed_when: false  # Continue even if some paths don't exist

    - name: Verify sliver binaries still work after cleanup
      ansible.builtin.command:
        cmd: "{{ sliver_install_path }}/{{ item }} version"
      loop: "{{ sliver_keep_binaries }}"
      register: sliver_binary_check
      failed_when: false
      become: true
      changed_when: false

    - name: Find and remove Python artifacts efficiently
      ansible.builtin.shell: |
        set -o pipefail
        # Target specific Python paths but keep core Python
        for dir in /usr/lib/python* /usr/local/lib/python*; do
          if [ -d "$dir" ]; then
            find "$dir" -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
            find "$dir" -type f \( -name "*.pyc" -o -name "*.pyo" \) -delete 2>/dev/null || true
            # Remove test directories but keep core modules
            find "$dir" -type d \( -name "test" -o -name "tests" -o -name "idle_test" \) -exec rm -rf {} + 2>/dev/null || true
          fi
        done
        # Remove pip cache
        rm -rf /root/.cache/pip
        rm -rf /home/*/.cache/pip
      args:
        executable: /bin/bash
      become: true
      changed_when: false
      failed_when: false

    - name: Truncate log files
      ansible.builtin.shell: |
        find /var/log -type f -exec truncate -s 0 {} \; 2>/dev/null || true
      args:
        executable: /bin/bash
      become: true
      changed_when: false
      failed_when: false

    - name: Container-specific optimizations
      when: ansible_virtualization_type == "docker"
      block:
        - name: Remove container-unnecessary locale data
          ansible.builtin.shell: |
            # Keep only C and en_US locales
            find /usr/share/locale -mindepth 1 -maxdepth 1 ! -name 'en*' -exec rm -rf {} + 2>/dev/null || true
            # Remove large locale source files
            rm -rf /usr/share/i18n/locales/cns11643_stroke
            rm -rf /usr/share/i18n/locales/iso14651_t1_common
            find /usr/share/i18n -type f -size +1M -delete 2>/dev/null || true
          args:
            executable: /bin/bash
          become: true
          changed_when: false
          failed_when: false

        - name: Remove container-unnecessary system files
          ansible.builtin.shell: |
            rm -rf /usr/share/zoneinfo
            rm -rf /usr/share/doc
            rm -rf /usr/share/man
            rm -rf /usr/share/info
            rm -rf /var/cache/ldconfig
          args:
            executable: /bin/bash
          become: true
          failed_when: false
          changed_when: false  # These are cleanup operations, not changes

    - name: Targeted cleanup for specific unnecessary packages
      ansible.builtin.shell: |
        set -o pipefail
        echo "=== Starting targeted cleanup for Sliver C2 container ==="

        # Always protect Python3 for Ansible
        PYTHON_PROTECTED="python3 python3-minimal libpython3-stdlib python3-apt"

        # Remove ASDF version manager
        rm -f /usr/local/bin/asdf
        rm -rf /opt/asdf
        rm -rf ~/.asdf

        rm -rf /home/sliver/go /home/sliver/.cache /home/sliver/.asdf /home/sliver/.local /home/sliver/.config /home/sliver/.tool-versions
        rm -rf /root/go /root/.cache /root/.asdf /root/.local /root/.tool-versions /root/.ssh
        rm -rf /tmp/* /var/tmp/*
        rm -rf /var/cache/debconf /var/lib/systemd/catalog /var/spool/cron /var/spool/mail

        # Remove only Python development packages, not core Python
        apt-get remove -y --purge \
          python3-dev python3-venv python3-pip python3-setuptools python3-wheel \
          python3-distutils python3-lib2to3 \
          2>/dev/null || true

        # Clean up Python but keep core modules
        find /usr/lib/python3* -type d \( -name "dist-packages" -o -name "site-packages" \) -exec sh -c '
          for dir; do
            # Keep only essential packages including apt and encodings
            find "$dir" -mindepth 1 -maxdepth 1 -type d ! \( -name "apt*" -o -name "encodings" -o -name "urllib*" -o -name "json" -o -name "importlib*" -o -name "collections*" \) -exec rm -rf {} + 2>/dev/null || true
          done
        ' sh {} +

        # Remove Perl completely if not in protected packages
        if ! echo "{{ sliver_protected_packages | join(' ') }}" | grep -q perl; then
          apt-get remove -y --purge perl perl-base perl-modules-* libperl* 2>/dev/null || true
          rm -rf /usr/lib/*/perl*
          rm -rf /usr/share/perl*
        fi

        # Remove systemd
        if ! echo "{{ sliver_protected_packages | join(' ') }}" | grep -q systemd; then
          apt-get remove -y --purge systemd libsystemd* 2>/dev/null || true
        fi

        # Remove graphics and display libraries
        apt-get remove -y --purge \
          libllvm* llvm* \
          libgallium* libvulkan* vulkan* \
          libgl* libgles* libdrm* mesa* \
          libgtk* libgdk* \
          libasound* libpulse* \
          libx11-* libxext* libxrender* libxtst* \
          2>/dev/null || true

        # Remove snapd
        apt-get remove -y --purge snapd snap-confine ubuntu-core-launcher 2>/dev/null || true
        rm -rf /usr/lib/snapd /snap /var/snap /var/lib/snapd

        # Remove development tools (but not runtime libraries)
        apt-get remove -y --purge \
          *-dev *-dbg *-doc \
          gcc* g++* cpp* \
          build-essential libtool cmake dpkg-dev \
          linux-libc-dev libc6-dev libc-dev-bin \
          manpages manpages-dev \
          2>/dev/null || true

        # Clean PostgreSQL development files but keep runtime
        if echo "{{ sliver_protected_packages | join(' ') }}" | grep -q postgresql; then
          # Only remove development/documentation files
          rm -rf /usr/lib/postgresql/*/lib/bitcode
          rm -rf /usr/lib/postgresql/*/lib/pgxs
          rm -rf /usr/share/postgresql/*/extension
          find /usr/lib/postgresql -name "*.bc" -delete 2>/dev/null || true
        else
          # Remove PostgreSQL completely if not protected
          apt-get remove -y --purge postgresql* libpq* 2>/dev/null || true
        fi

        # Remove hardware databases
        rm -rf /usr/lib/udev
        rm -f /lib/udev/hwdb.bin

        # Remove gconv libraries if not needed
        rm -rf /usr/lib/*/gconv

        # Remove static libraries and headers
        find /usr -name "*.a" -delete 2>/dev/null || true
        find /usr -name "*.la" -delete 2>/dev/null || true
        rm -rf /usr/include

        # Final autoremove
        apt-get autoremove -y --purge

        echo "=== Targeted cleanup complete ==="
      args:
        executable: /bin/bash
      become: true
      when: ansible_os_family == "Debian"
      failed_when: false
      changed_when: false

    - name: Final APT cleanup
      ansible.builtin.apt:
        autoclean: yes
        autoremove: yes
        clean: yes
      become: true
      when: ansible_os_family == "Debian"
      changed_when: false
      failed_when: false

    - name: Clean APT cache and lists
      ansible.builtin.shell: |
        rm -rf /var/lib/apt/lists/*
        rm -rf /var/cache/apt/*
        rm -rf /var/lib/dpkg/*-old
        rm -rf /var/lib/dpkg/backup/*
      args:
        executable: /bin/bash
      become: true
      when: ansible_os_family == "Debian"
      changed_when: false

    - name: Unhold protected packages after cleanup
      ansible.builtin.shell: |
        set -o pipefail
        for pkg in {{ sliver_protected_packages | join(' ') }}; do
          echo "$pkg install" | dpkg --set-selections 2>/dev/null || true
        done
      args:
        executable: /bin/bash
      become: true
      when: ansible_os_family == "Debian"
      failed_when: false
      changed_when: false  # This is a state restoration, not a change

- name: Display cleanup summary
  ansible.builtin.debug:
    msg:
      - "=== Sliver Cleanup Complete ==="
      - "Protected packages: {{ sliver_protected_packages | length }}"
      - "Binaries verified: {{ sliver_keep_binaries | join(', ') }}"
      - "All binaries functional: {{ sliver_binary_check.results | selectattr('rc', 'equalto', 0) | list | length == sliver_keep_binaries | length }}"
  when: sliver_binary_check is defined
