---
- name: Clean up build environment
  when: sliver_cleanup | bool
  block:
    - name: Hold git package to prevent removal during cleanup
      ansible.builtin.dpkg_selections:
        name: git
        selection: hold
      become: true
      when: ansible_os_family == "Debian"

    - name: Remove build-time Go installation and caches
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop: "{{ sliver_cleanup_paths }}"
      become: true

    - name: Find non-binary files in sliver directory
      ansible.builtin.find:
        paths: "{{ sliver_install_path }}"
        file_type: file
        recurse: false
        excludes: "{{ sliver_keep_binaries }}"
      register: sliver_files_to_remove
      become: true

    - name: Remove non-binary files from sliver directory
      ansible.builtin.file:
        path: "{{ item.path }}"
        state: absent
      loop: "{{ sliver_files_to_remove.files }}"
      become: true

    - name: Remove source directories from sliver installation
      ansible.builtin.file:
        path: "{{ sliver_install_path }}/{{ item }}"
        state: absent
      loop: "{{ sliver_source_directories }}"
      become: true

    - name: Find empty directories in sliver path
      ansible.builtin.find:
        paths: "{{ sliver_install_path }}"
        file_type: directory
        recurse: true
      register: sliver_all_dirs
      become: true

    - name: Remove empty directories
      ansible.builtin.file:
        path: "{{ item.path }}"
        state: absent
      loop: "{{ sliver_all_dirs.files }}"
      when: item.size == 0
      become: true

    - name: Strip debug symbols from binaries
      ansible.builtin.command:
        cmd: "strip {{ sliver_install_path }}/{{ item }}"
      loop: "{{ sliver_keep_binaries }}"
      become: true
      changed_when: false
      failed_when: false

    - name: Check for unpacked Go compiler
      ansible.builtin.stat:
        path: "{{ sliver_user_home }}/.sliver/go"
      register: sliver_go_compiler
      become: true

    - name: Remove unpacked Go compiler if found
      ansible.builtin.file:
        path: "{{ sliver_user_home }}/.sliver/go"
        state: absent
      when: sliver_go_compiler.stat.exists
      become: true

    - name: Check for unpacked Zig compiler
      ansible.builtin.stat:
        path: "{{ sliver_user_home }}/.sliver/zig"
      register: sliver_zig_compiler
      become: true

    - name: Remove unpacked Zig compiler if found
      ansible.builtin.file:
        path: "{{ sliver_user_home }}/.sliver/zig"
        state: absent
      when: sliver_zig_compiler.stat.exists
      become: true

    - name: Gather package facts
      ansible.builtin.package_facts:
        manager: apt
      when: ansible_os_family == "Debian"
      become: true

    - name: Identify MinGW packages to remove
      ansible.builtin.set_fact:
        sliver_mingw_packages_to_remove: "{{ ansible_facts.packages.keys() | select('match', '.*mingw.*|.*w64.*') | reject('match', '.*git.*') | list }}"
      when:
        - ansible_os_family == "Debian"
        - ansible_facts.packages is defined

    - name: Remove MinGW packages
      ansible.builtin.apt:
        name: "{{ sliver_mingw_packages_to_remove }}"
        state: absent
        purge: true
      when:
        - ansible_os_family == "Debian"
        - sliver_mingw_packages_to_remove is defined
        - sliver_mingw_packages_to_remove | length > 0
      become: true

    - name: Remove MinGW directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop: "{{ sliver_mingw_directories }}"
      become: true

    - name: Remove unnecessary system libraries for containers
      ansible.builtin.apt:
        name: "{{ sliver_container_remove_packages }}"
        state: absent
        purge: true
      when:
        - ansible_os_family == "Debian"
        - ansible_virtualization_type == "docker"
      become: true
      failed_when: false

    - name: Remove development packages
      ansible.builtin.apt:
        name: "{{ sliver_cleanup_packages_debian }}"
        state: absent
        purge: true
        autoremove: true
        autoclean: true
      when: ansible_os_family == "Debian"
      become: true

    - name: Remove system cache paths
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop: "{{ sliver_system_cleanup_paths }}"
      become: true

    - name: Find Python cache directories
      ansible.builtin.find:
        paths: /usr
        patterns: "__pycache__"
        file_type: directory
        recurse: true
      register: sliver_pycache_dirs
      become: true
      failed_when: false

    - name: Remove Python cache directories
      ansible.builtin.file:
        path: "{{ item.path }}"
        state: absent
      loop: "{{ sliver_pycache_dirs.files | default([]) }}"
      become: true

    - name: Find Python compiled files
      ansible.builtin.find:
        paths: /usr
        patterns: "*.pyc"
        file_type: file
        recurse: true
      register: sliver_pyc_files
      become: true
      failed_when: false

    - name: Remove Python compiled files
      ansible.builtin.file:
        path: "{{ item.path }}"
        state: absent
      loop: "{{ sliver_pyc_files.files | default([]) }}"
      become: true

    - name: Remove pip cache
      ansible.builtin.file:
        path: /root/.cache/pip
        state: absent
      become: true

    - name: Find log files
      ansible.builtin.find:
        paths: /var/log
        file_type: file
        recurse: true
      register: sliver_log_files
      become: true
      failed_when: false

    - name: Truncate sliver log files
      ansible.builtin.copy:
        content: ""
        dest: "{{ item.path }}"
        mode: '0644'
      loop: "{{ sliver_log_files.files | default([]) }}"
      become: true
      changed_when: false

    - name: Clean sliver user cache directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - "{{ sliver_user_home }}/.cache"
        - "{{ sliver_user_home }}/.local"
        - "{{ sliver_user_home }}/.config"
        - "{{ sliver_user_home }}/.tool-versions"
      become: true

    - name: Clean root home directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - /root/.asdf
        - /root/.local
        - /root/.tool-versions
        - /root/.ssh
      become: true

    - name: Check if PostgreSQL log directory exists
      ansible.builtin.stat:
        path: /var/log/postgresql
      register: sliver_postgresql_log_dir
      become: true

    - name: Find PostgreSQL log files
      ansible.builtin.find:
        paths: /var/log/postgresql
        patterns: "*.log"
        file_type: file
      register: sliver_postgres_logs
      when:
        - sliver_postgresql_log_dir.stat.exists
        - sliver_postgresql_log_dir.stat.isdir
      become: true
      failed_when: false

    - name: Truncate PostgreSQL log files
      ansible.builtin.copy:
        content: ""
        dest: "{{ item.path }}"
        mode: '0644'
      loop: "{{ sliver_postgres_logs.files | default([]) }}"
      when: sliver_postgres_logs.files is defined
      become: true
      changed_when: false

    - name: Unhold git package after cleanup is complete
      ansible.builtin.dpkg_selections:
        name: git
        selection: install
      become: true
      when: ansible_os_family == "Debian"
