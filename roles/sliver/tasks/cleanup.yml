---
- name: Clean up build environment
  when: sliver_cleanup | bool
  block:
    - name: Hold git package to prevent removal during cleanup
      ansible.builtin.dpkg_selections:
        name: git
        selection: hold
      become: true
      when: ansible_os_family == "Debian"

    - name: Remove build-time Go installation and caches
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop: "{{ sliver_cleanup_paths }}"
      become: true

    - name: Find non-binary files in sliver directory
      ansible.builtin.find:
        paths: "{{ sliver_install_path }}"
        file_type: file
        recurse: false
        excludes: "{{ sliver_keep_binaries }}"
      register: sliver_files_to_remove
      become: true

    - name: Remove non-binary files from sliver directory
      ansible.builtin.file:
        path: "{{ item.path }}"
        state: absent
      loop: "{{ sliver_files_to_remove.files }}"
      become: true

    - name: Remove source directories from sliver installation
      ansible.builtin.file:
        path: "{{ sliver_install_path }}/{{ item }}"
        state: absent
      loop: "{{ sliver_source_directories }}"
      become: true

    - name: Find empty directories in sliver path
      ansible.builtin.find:
        paths: "{{ sliver_install_path }}"
        file_type: directory
        recurse: true
      register: sliver_all_dirs
      become: true

    - name: Remove empty directories
      ansible.builtin.file:
        path: "{{ item.path }}"
        state: absent
      loop: "{{ sliver_all_dirs.files }}"
      when: item.size == 0
      become: true

    - name: Strip debug symbols from binaries
      ansible.builtin.command:
        cmd: "strip {{ sliver_install_path }}/{{ item }}"
      loop: "{{ sliver_keep_binaries }}"
      become: true
      changed_when: false
      failed_when: false

    - name: Check for unpacked Go compiler
      ansible.builtin.stat:
        path: "{{ sliver_user_home }}/.sliver/go"
      register: sliver_go_compiler
      become: true

    - name: Remove unpacked Go compiler if found
      ansible.builtin.file:
        path: "{{ sliver_user_home }}/.sliver/go"
        state: absent
      when: sliver_go_compiler.stat.exists
      become: true

    - name: Check for unpacked Zig compiler
      ansible.builtin.stat:
        path: "{{ sliver_user_home }}/.sliver/zig"
      register: sliver_zig_compiler
      become: true

    - name: Remove unpacked Zig compiler if found
      ansible.builtin.file:
        path: "{{ sliver_user_home }}/.sliver/zig"
        state: absent
      when: sliver_zig_compiler.stat.exists
      become: true

    - name: Gather package facts
      ansible.builtin.package_facts:
        manager: apt
      when: ansible_os_family == "Debian"
      become: true

    - name: Identify MinGW packages to remove
      ansible.builtin.set_fact:
        sliver_mingw_packages_to_remove: "{{ ansible_facts.packages.keys() | select('match', '.*mingw.*|.*w64.*') | reject('match', '.*git.*') | list }}"
      when:
        - ansible_os_family == "Debian"
        - ansible_facts.packages is defined

    - name: Remove MinGW packages
      ansible.builtin.apt:
        name: "{{ sliver_mingw_packages_to_remove }}"
        state: absent
        purge: true
      when:
        - ansible_os_family == "Debian"
        - sliver_mingw_packages_to_remove is defined
        - sliver_mingw_packages_to_remove | length > 0
      become: true

    - name: Remove MinGW directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop: "{{ sliver_mingw_directories }}"
      become: true

    - name: Remove unnecessary system libraries for containers
      ansible.builtin.apt:
        name: "{{ sliver_container_remove_packages }}"
        state: absent
        purge: true
      when:
        - ansible_os_family == "Debian"
        - ansible_virtualization_type == "docker"
      become: true
      failed_when: false

    - name: Remove development packages
      ansible.builtin.apt:
        name: "{{ sliver_cleanup_packages_debian }}"
        state: absent
        purge: true
        autoremove: true
        autoclean: true
      when: ansible_os_family == "Debian"
      become: true

    # Keep the Ansible-native Python cleanup but supplement it
    - name: Find Python cache directories
      ansible.builtin.find:
        paths: /usr
        patterns: "__pycache__"
        file_type: directory
        recurse: true
      register: sliver_pycache_dirs
      become: true
      failed_when: false

    - name: Remove Python cache directories
      ansible.builtin.file:
        path: "{{ item.path }}"
        state: absent
      loop: "{{ sliver_pycache_dirs.files | default([]) }}"
      become: true

    - name: Find Python compiled files
      ansible.builtin.find:
        paths: /usr
        patterns: "*.pyc"
        file_type: file
        recurse: true
      register: sliver_pyc_files
      become: true
      failed_when: false

    - name: Remove Python compiled files
      ansible.builtin.file:
        path: "{{ item.path }}"
        state: absent
      loop: "{{ sliver_pyc_files.files | default([]) }}"
      become: true

    - name: Remove pip cache
      ansible.builtin.file:
        path: /root/.cache/pip
        state: absent
      become: true

    - name: Find log files
      ansible.builtin.find:
        paths: /var/log
        file_type: file
        recurse: true
      register: sliver_log_files
      become: true
      failed_when: false

    - name: Truncate sliver log files
      ansible.builtin.copy:
        content: ""
        dest: "{{ item.path }}"
        mode: '0644'
      loop: "{{ sliver_log_files.files | default([]) }}"
      become: true
      changed_when: false

    - name: Clean sliver user cache directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - "{{ sliver_user_home }}/.cache"
        - "{{ sliver_user_home }}/.local"
        - "{{ sliver_user_home }}/.config"
        - "{{ sliver_user_home }}/.tool-versions"
      become: true

    - name: Clean root home directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - /root/.asdf
        - /root/.local
        - /root/.tool-versions
        - /root/.ssh
      become: true

    - name: Final cleanup - remove unnecessary items for container image builds
      ansible.builtin.shell: |
        set -e

        echo "=== Starting ultra-aggressive cleanup ==="

        # Remove LLVM and graphics libraries
        apt-get remove -y --purge \
          libllvm* llvm* \
          libgallium* \
          libvulkan* vulkan* \
          libgl* libgles* \
          libdrm* \
          mesa* \
          2>/dev/null || true

        # Remove snapd
        apt-get remove -y --purge snapd snap-confine ubuntu-core-launcher 2>/dev/null || true
        rm -rf /usr/lib/snapd
        rm -rf /snap
        rm -rf /var/snap
        rm -rf /var/lib/snapd

        # Remove ICU internationalization
        apt-get remove -y --purge libicu* icu-* 2>/dev/null || true

        # Remove development packages and compilers
        apt-get remove -y --purge \
          *-dev *-dbg *-doc \
          gcc* g++* cpp* \
          build-essential libtool cmake dpkg-dev \
          linux-libc-dev libc6-dev libc-dev-bin \
          manpages manpages-dev \
          2>/dev/null || true

        # Remove GCC
        rm -rf /usr/libexec/gcc
        rm -rf /usr/lib/gcc

        # Remove Perl
        apt-get remove -y --purge perl perl-base perl-modules-* 2>/dev/null || true
        rm -rf /usr/lib/aarch64-linux-gnu/perl*
        rm -rf /usr/share/perl*

        # Remove Python packages
        apt-get remove -y --purge \
          python3-pip python3-setuptools python3-wheel \
          python3-dev python3-venv \
          2>/dev/null || true

        # Remove other unnecessary packages
        apt-get remove -y --purge \
          openssh-server \
          krb5-locales \
          publicsuffix \
          xauth \
          fontconfig* fonts-* \
          libgtk* libgdk* \
          libasound* libpulse* \
          libx11-* libxext* libxrender* libxtst* \
          2>/dev/null || true

        # Clean PostgreSQL - remove bitcode and unnecessary components
        rm -rf /usr/lib/postgresql/*/lib/bitcode
        rm -rf /usr/lib/postgresql/*/lib/pgxs
        rm -rf /usr/share/postgresql/*/extension
        find /usr/lib/postgresql -name "*.bc" -delete 2>/dev/null || true

        # Remove file magic database
        rm -f /usr/lib/file/magic.mgc

        # Remove udev hardware database
        rm -f /usr/lib/udev/hwdb.bin

        # Purge any packages that were automatically installed as dependencies
        apt-get autoremove -y --purge

        # Mark all libraries as auto-installed and remove unused
        apt-mark auto ".*" 2>/dev/null || true
        apt-mark manual git sliver-server sliver-client postgresql postgresql-client postgresql-contrib 2>/dev/null || true
        apt-get autoremove -y --purge

        # Clean package manager completely
        apt-get clean
        apt-get autoclean
        rm -rf /var/lib/apt/lists/*
        rm -rf /var/cache/apt/*
        rm -rf /var/cache/debconf/*
        rm -rf /var/lib/dpkg/*-old
        rm -rf /var/lib/dpkg/backup/*

        # Remove all documentation and man pages
        rm -rf /usr/share/doc
        rm -rf /usr/share/man
        rm -rf /usr/share/info
        rm -rf /usr/share/lintian
        rm -rf /usr/share/linda
        rm -rf /usr/share/bug

        # Remove all locales except C
        rm -rf /usr/share/locale/*

        # Remove misc shared data
        rm -rf /usr/share/zoneinfo
        rm -rf /usr/share/i18n
        rm -rf /usr/share/common-licenses
        rm -rf /usr/share/mime
        rm -rf /usr/share/pixmaps
        rm -rf /usr/share/applications
        rm -rf /usr/share/menu
        rm -rf /usr/share/sounds
        rm -rf /usr/share/icons
        rm -rf /usr/share/fonts
        rm -rf /usr/share/terminfo
        rm -rf /usr/share/X11
        rm -rf /usr/share/bash-completion

        # Remove all static libraries and headers
        find /usr -name "*.a" -delete 2>/dev/null || true
        find /usr -name "*.la" -delete 2>/dev/null || true
        rm -rf /usr/include

        # Remove Python stuff we do not need
        rm -rf /usr/lib/python*/test
        rm -rf /usr/lib/python*/tests
        rm -rf /usr/lib/python*/idle*
        rm -rf /usr/lib/python*/tkinter
        rm -rf /usr/lib/python*/unittest
        rm -rf /usr/lib/python*/ensurepip
        rm -rf /usr/lib/python*/distutils
        rm -rf /usr/lib/python*/lib2to3
        rm -rf /usr/lib/python*/pydoc*
        rm -rf /usr/lib/python*/config-*
        find /usr -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
        find /usr -type f -name "*.pyc" -delete 2>/dev/null || true
        find /usr -type f -name "*.pyo" -delete 2>/dev/null || true

        # Clean all caches
        rm -rf /var/cache/*
        rm -rf /root/.cache
        rm -rf /root/.local
        rm -rf /root/.config
        rm -rf /home/*/.cache
        rm -rf /home/*/.local
        rm -rf /home/*/.config

        # Clean tmp
        rm -rf /tmp/* /var/tmp/*

        # Remove all logs
        find /var/log -type f -delete 2>/dev/null || true

        # Remove cron, systemd catalog, etc
        rm -rf /var/spool/cron
        rm -rf /var/spool/mail
        rm -rf /var/lib/systemd/catalog

        # Cleanup any remaining build artifacts
        find / -name "*.o" -delete 2>/dev/null || true
        find / -name "*.lo" -delete 2>/dev/null || true

        echo "=== Cleanup complete ==="
      args:
        executable: /bin/bash
      become: true
      when: ansible_os_family == "Debian"
      failed_when: false
      changed_when: false

    - name: Unhold git package after cleanup is complete
      ansible.builtin.dpkg_selections:
        name: git
        selection: install
      become: true
      when: ansible_os_family == "Debian"
