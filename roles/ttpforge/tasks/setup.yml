---
- name: Configure Git to allow ttpforge repository as a safe directory
  community.general.git_config:
    name: safe.directory
    scope: global
    value: "{{ ttpforge_install_path }}"
  become: true

- name: Clone ttpforge repo
  ansible.builtin.git:
    repo: 'https://github.com/facebookincubator/ttpforge.git'
    dest: "{{ ttpforge_install_path }}"
    version: main
    depth: 1
    force: true
    update: true
  become: true
  register: git_clone_result
  changed_when: git_clone_result.before != git_clone_result.after

- name: Check current ownership of {{ ttpforge_install_path }}
  ansible.builtin.stat:
    path: "{{ ttpforge_install_path }}"
  register: ttpforge_dir_stat
  become: true

- name: Ensure correct ownership of the ttpforge repository
  ansible.builtin.file:
    path: "{{ ttpforge_install_path }}"
    owner: "{{ ttpforge_username }}"
    group: "{{ ttpforge_usergroup }}"
    recurse: true
  become: true
  when: >
    ttpforge_dir_stat.stat.exists and
    (ttpforge_dir_stat.stat.pw_name != ttpforge_username or
     ttpforge_dir_stat.stat.gr_name != ttpforge_usergroup)

- name: Set up Go version in ttpforge directory
  ansible.builtin.copy:
    dest: "{{ ttpforge_install_path }}/.tool-versions"
    content: "golang {{ ttpforge_asdf_plugins[0].version }}"
    owner: "{{ ttpforge_username }}"
    group: "{{ ttpforge_usergroup }}"
    mode: '0644'
  when: ttpforge_asdf_plugins | selectattr('name', 'equalto', 'golang') | list | length > 0

- name: Add ttpforge_install_path to $PATH
  ansible.builtin.lineinfile:
    path: "{{ ttpforge_user_home }}/.bashrc"
    line: "export PATH=$PATH:{{ ttpforge_install_path }}"
    insertafter: EOF
    regexp: "^export PATH=.*:{{ ttpforge_install_path }}.*$"
  become: true
  become_user: "{{ ttpforge_username }}"

- name: Check if ttpforge binary exists
  ansible.builtin.stat:
    path: "{{ ttpforge_install_path }}/ttpforge"
  register: ttpforge_binary_stat
  become: true

- name: Ensure golang is installed for user
  ansible.builtin.shell: |
    export ASDF_DATA_DIR="{{ ttpforge_user_home }}/.asdf"
    export PATH="/usr/local/bin:$PATH"

    # Uninstall golang first if it exists
    asdf uninstall golang {{ ttpforge_asdf_plugins[0].version }} || true

    # Install golang version
    asdf install golang {{ ttpforge_asdf_plugins[0].version }}

    # Set the golang version
    asdf set --home golang {{ ttpforge_asdf_plugins[0].version }}

    # Reshim to ensure shims are created
    asdf reshim golang
  args:
    executable: /bin/bash
  become: true
  become_user: "{{ ttpforge_username }}"
  environment:
    HOME: "{{ ttpforge_user_home }}"
    USER: "{{ ttpforge_username }}"
    ASDF_DATA_DIR: "{{ ttpforge_user_home }}/.asdf"
  when: not ttpforge_binary_stat.stat.exists
  changed_when: false

- name: Compile ttpforge
  ansible.builtin.shell: |
    set -o pipefail

    # Check asdf is available and working
    export ASDF_DATA_DIR="{{ ttpforge_user_home }}/.asdf"
    export PATH="/usr/local/bin:${ASDF_DATA_DIR}/shims:$PATH"
    asdf --version

    # Reshim and verify golang version
    asdf reshim golang
    asdf current golang

    # Ensure go binary is available
    GO_BIN_PATH=$(find "${ASDF_DATA_DIR}/installs/golang/{{ ttpforge_asdf_plugins[0].version }}" -name go -type f -executable | head -1)

    if [ -z "$GO_BIN_PATH" ]; then
      echo "Could not find go binary in standard location, checking alternative paths..."
      GO_BIN_PATH=$(find "${ASDF_DATA_DIR}/installs/golang" -name go -type f -executable | head -1)
    fi

    if [ -z "$GO_BIN_PATH" ]; then
      echo "Still could not find go binary, checking shims directory..."
      if [ -x "${ASDF_DATA_DIR}/shims/go" ]; then
        GO_BIN_PATH="${ASDF_DATA_DIR}/shims/go"
      fi
    fi

    if [ -z "$GO_BIN_PATH" ]; then
      echo "ERROR: Could not find go executable anywhere"
      exit 1
    fi

    echo "Found Go binary at: ${GO_BIN_PATH}"

    # Verify Go works
    echo "Running Go version check:"
    "$GO_BIN_PATH" version

    # Run go mod tidy to update dependencies
    echo "Running go mod tidy to update dependencies:"
    "$GO_BIN_PATH" mod tidy

    # Build the ttpforge binary using the direct path to Go
    echo "Building ttpforge binary:"
    "$GO_BIN_PATH" build -buildvcs=false -o {{ ttpforge_install_path }}/ttpforge
  args:
    chdir: "{{ ttpforge_install_path }}"
    executable: /bin/bash
  become: true
  become_user: "{{ ttpforge_username }}"
  environment:
    HOME: "{{ ttpforge_user_home }}"
    USER: "{{ ttpforge_username }}"
    ASDF_DATA_DIR: "{{ ttpforge_user_home }}/.asdf"
    PATH: "/usr/local/bin:{{ ttpforge_user_home }}/.asdf/shims:/usr/bin:/bin"
    GO111MODULE: "on"
    GOPATH: "{{ ttpforge_user_home }}/go"
  when: not ttpforge_binary_stat.stat.exists
  tags:
    - molecule-idempotence-notest
  changed_when: "'molecule-idempotence-notest' not in ansible_skip_tags"
  register: compile_result
  failed_when:
    - compile_result.rc != 0
    - "'No executable go found' not in compile_result.stderr"

- name: Check if ttpforge has been initialized
  ansible.builtin.stat:
    path: "{{ ansible_env.HOME }}/.ttpforge"
  register: ttpforge_initialized_stat

- name: Initialize ttpforge
  ansible.builtin.command:
    cmd: "{{ ttpforge_install_path }}/ttpforge init"
  when: not ttpforge_initialized_stat.stat.exists
  changed_when: false
