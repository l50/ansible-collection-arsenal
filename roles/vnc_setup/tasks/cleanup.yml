---
- name: Check if VNC needs to be restarted
  ansible.builtin.set_fact:
    vnc_needs_restart: "{{ vnc_needs_restart | default(false) | bool or service_file_updated.changed | default(false) | bool or start_vnc_script_updated.changed | default(false) | bool }}"

- name: Get running VNC processes for users
  ansible.builtin.command:
    cmd: "pgrep -u {{ item.username }} -f 'X(tigervnc|vnc)'"
  register: vnc_processes
  loop: "{{ vnc_setup_users_uid.result | default(vnc_setup_users) }}"
  changed_when: false
  check_mode: false
  failed_when: false
  when: vnc_needs_restart | bool

- name: Stop VNC processes with SIGTERM first
  ansible.builtin.shell:
    cmd: "kill {{ item.stdout_lines | join(' ') }} || true"
  loop: "{{ vnc_processes.results | default([]) }}"
  when:
    - vnc_needs_restart | bool
    - item.stdout_lines is defined
    - item.stdout_lines | default([]) | length > 0
    - item.rc == 0
  register: kill_result
  changed_when: false
  failed_when: false

- name: Wait for processes to terminate gracefully
  ansible.builtin.pause:
    seconds: 2
  when:
    - vnc_needs_restart | bool
    - kill_result.changed | default(false)

- name: Force kill remaining VNC processes with SIGKILL
  ansible.builtin.shell:
    cmd: "kill -9 {{ item.stdout_lines | join(' ') }} || true"
  loop: "{{ vnc_processes.results | default([]) }}"
  when:
    - vnc_needs_restart | bool
    - item.stdout_lines is defined
    - item.stdout_lines | default([]) | length > 0
    - item.rc == 0
  changed_when: false
  failed_when: false

- name: Clean up VNC lock files
  ansible.builtin.file:
    path: "/tmp/.X{{ user_item.vnc_num }}-lock"
    state: absent
  loop: "{{ vnc_setup_users_uid.result | default(vnc_setup_users) }}"
  loop_control:
    loop_var: user_item
  failed_when: false
  when: vnc_needs_restart | bool

- name: Clean up VNC socket files
  ansible.builtin.file:
    path: "/tmp/.X11-unix/X{{ user_item.vnc_num }}"
    state: absent
  loop: "{{ vnc_setup_users_uid.result | default(vnc_setup_users) }}"
  loop_control:
    loop_var: user_item
  failed_when: false
  when: vnc_needs_restart | bool

- name: Clean up VNC PID files
  ansible.builtin.shell:
    cmd: "rm -f /home/{{ user_item.username }}/.vnc/*.pid"
  loop: "{{ vnc_setup_users_uid.result | default(vnc_setup_users) }}"
  loop_control:
    loop_var: user_item
  changed_when: false
  failed_when: false
  when: vnc_needs_restart | bool
