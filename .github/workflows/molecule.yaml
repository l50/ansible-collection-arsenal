---
name: Molecule Test
on:
  merge_group:
  pull_request:
    branches:
      - main
    types:
      - opened
      - synchronize
      - reopened
  push:
    branches:
      - main
  schedule:
    # Runs every Sunday at 4 AM (see https://crontab.guru)
    - cron: "0 4 * * 0"
  workflow_dispatch:
    inputs:
      ROLE:
        description: 'Role to test'
        required: false
        default: ''
        type: string
      PLAYBOOK:
        description: 'Playbook to test'
        required: false
        default: ''
        type: string

concurrency:
  # Only cancel in-progress runs for PRs, not for main branch or scheduled runs
  cancel-in-progress: ${{ github.event_name == 'pull_request' && ! contains(github.event.pull_request.labels.*.name, 'renovate') }}
  # Use different group keys based on the event type
  group: ${{ github.workflow }}-${{ github.event_name == 'pull_request' && ! contains(github.event.pull_request.labels.*.name, 'renovate') && github.event.pull_request.number || github.ref }}

env:
  ANSIBLE_FORCE_COLOR: "1"
  COLLECTION_NAMESPACE: cowdogmoo
  COLLECTION_NAME: workstation
  COLLECTION_PATH: ansible_collections/cowdogmoo/workstation
  REQUIREMENTS_FILE: .hooks/requirements.txt
  PY_COLORS: "1"
  PYTHON_VERSION: "3.12.6"
  ROLE: ${{ github.event.inputs.ROLE }}
  PLAYBOOK: ${{ github.event.inputs.PLAYBOOK }}
  ANSIBLE_COLLECTIONS_PATH: ~/.ansible/collections

# Permissions block for GitHub App
permissions:
  actions: write
  contents: write
  issues: write
  pull-requests: write

jobs:
  validate-inputs:
    runs-on: ubuntu-latest
    steps:
      - name: Set up git repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          path: ${{ env.COLLECTION_PATH }}

      - name: Validate inputs
        run: |
          if [[ -n "${{ env.ROLE }}" && -n "${{ env.PLAYBOOK }}" ]]; then
            echo "::error::Cannot specify both ROLE and PLAYBOOK"
            exit 1
          fi

          if [[ -n "${{ env.ROLE }}" ]]; then
            if [[ ! -d "${{ env.COLLECTION_PATH }}/roles/${{ env.ROLE }}" ]]; then
              echo "::error::Role '${{ env.ROLE }}' not found in roles/"
              exit 1
            fi
          fi

          if [[ -n "${{ env.PLAYBOOK }}" ]]; then
            if [[ ! -d "${{ env.COLLECTION_PATH }}/playbooks/${{ env.PLAYBOOK }}" ]]; then
              echo "::error::Playbook '${{ env.PLAYBOOK }}' not found in playbooks/"
              exit 1
            fi
          fi

  role_test:
    needs: validate-inputs
    if: ${{ github.event.inputs.ROLE != '' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60
    strategy:
      fail-fast: false
      max-parallel: 3
      matrix:
        include:
          - name: ${{ format('Role Test - {0}', github.event.inputs.ROLE) }}
            path: ${{ format('roles/{0}', github.event.inputs.ROLE) }}

    steps:
      - name: Install Act dependencies
        if: ${{ env.ACT }}
        run: |
          apt-get update && apt-get install rsync sudo -y

      - name: Delete huge unnecessary tools folder
        if: env.ACT == ''
        shell: bash
        run: |
          echo "Initial disk space:"
          df -h
          rm -rf /opt/hostedtoolcache
          echo "Disk space after cleanup:"
          df -h

      - name: Checkout git repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          path: ${{ env.COLLECTION_PATH }}

      - name: Set up Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: '${{ env.COLLECTION_PATH }}/${{ env.REQUIREMENTS_FILE }}'

      - name: Cache Ansible collections
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: ~/.ansible/collections
          key: ${{ runner.os }}-ansible-${{ hashFiles('**/requirements.yml') }}

      - name: Install dependencies
        shell: bash
        run: |
          python3 -m pip install -r "${{ env.COLLECTION_PATH }}/${{ env.REQUIREMENTS_FILE }}"

      - name: Install galaxy dependencies
        working-directory: ${{ env.COLLECTION_PATH }}
        shell: bash
        run: |
          ansible-galaxy collection install -r requirements.yml
          ansible-galaxy install -r requirements.yml

      - name: Build and install collection locally
        working-directory: ${{ env.COLLECTION_PATH }}
        shell: bash
        run: |
          ansible-galaxy collection build --force
          ansible-galaxy collection install cowdogmoo-workstation-*.tar.gz -p ~/.ansible/collections --force --pre

      - name: Run molecule test
        working-directory: ${{ env.COLLECTION_PATH }}/${{ matrix.path }}
        shell: bash
        env:
          ANSIBLE_CONFIG: ${{ env.COLLECTION_PATH }}/ansible.cfg
          ANSIBLE_ROLES_PATH: ${{ env.COLLECTION_PATH }}/roles
          MOLECULE_NO_LOG: "false"
        run: |
          set -e
          molecule --version
          molecule list

          if ! MOLECULE_DEBUG=1 molecule test; then
            echo "Molecule test failed. Collecting debug information..."

            echo "Docker containers:"
            docker ps -a

            echo "=== Docker Container Logs ==="
            while read -r container; do
              echo "=== Logs from container ${container} ==="
              docker logs "${container}" 2>&1
              echo "=== End logs for container ${container} ==="
            done < <(docker ps -q)

            echo "=== Molecule Logs ==="
            while IFS= read -r -d '' log; do
              echo "Contents of ${log}:"
              cat "${log}"
              echo "=== End of ${log} ==="
            done < <(find . -name '*.log' -print0)

            exit 1
          fi

  playbook_test:
    needs: validate-inputs
    if: ${{ github.event.inputs.PLAYBOOK != '' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60
    strategy:
      fail-fast: false
      max-parallel: 3
      matrix:
        include:
          - name: ${{ format('Playbook Test - {0}', github.event.inputs.PLAYBOOK) }}
            path: ${{ format('playbooks/{0}', github.event.inputs.PLAYBOOK) }}

    steps:
      - name: Install Act dependencies
        if: ${{ env.ACT }}
        run: |
          apt-get update && apt-get install rsync sudo -y

      - name: Delete huge unnecessary tools folder
        if: env.ACT == ''
        shell: bash
        run: |
          echo "Initial disk space:"
          df -h
          rm -rf /opt/hostedtoolcache
          echo "Disk space after cleanup:"
          df -h

      - name: Checkout git repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          path: ${{ env.COLLECTION_PATH }}

      - name: Set up Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: '${{ env.COLLECTION_PATH }}/${{ env.REQUIREMENTS_FILE }}'

      - name: Cache Ansible collections
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: ~/.ansible/collections
          key: ${{ runner.os }}-ansible-${{ hashFiles('**/requirements.yml') }}

      - name: Install dependencies
        shell: bash
        run: |
          python3 -m pip install -r "${{ env.COLLECTION_PATH }}/${{ env.REQUIREMENTS_FILE }}"

      - name: Install galaxy dependencies
        working-directory: ${{ env.COLLECTION_PATH }}
        shell: bash
        run: |
          ansible-galaxy collection install -r requirements.yml
          ansible-galaxy install -r requirements.yml

      - name: Build and install collection locally
        working-directory: ${{ env.COLLECTION_PATH }}
        shell: bash
        run: |
          ansible-galaxy collection build --force
          ansible-galaxy collection install cowdogmoo-workstation-*.tar.gz -p ~/.ansible/collections --force --pre

      - name: Run molecule test
        working-directory: ${{ env.COLLECTION_PATH }}/${{ matrix.path }}
        shell: bash
        run: |
          set -ex
          molecule --version
          molecule list

          if ! MOLECULE_DEBUG=1 molecule test; then
            echo "Molecule test failed. Collecting debug information..."

            echo "Docker containers:"
            docker ps -a

            echo "=== Docker Container Logs ==="
            while read -r container; do
              echo "=== Logs from container ${container} ==="
              docker logs "${container}" 2>&1
              echo "=== End logs for container ${container} ==="
            done < <(docker ps -q)

            echo "=== Molecule Logs ==="
            while IFS= read -r -d '' log; do
              echo "Contents of ${log}:"
              cat "${log}"
              echo "=== End of ${log} ==="
            done < <(find . -name '*.log' -print0)

            exit 1
          fi

  full_test:
    needs: validate-inputs
    if: ${{ github.event.inputs.ROLE == '' && github.event.inputs.PLAYBOOK == '' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60
    strategy:
      fail-fast: false
      max-parallel: 3
      matrix:
        include:
          - name: "Role Test - asdf"
            path: "roles/asdf"
          - name: "Role Test - user_setup"
            path: "roles/user_setup"
          - name: "Role Test - package_management"
            path: "roles/package_management"
          - name: "Role Test - vnc_setup"
            path: "roles/vnc_setup"
          - name: "Role Test - zsh_setup"
            path: "roles/zsh_setup"
          - name: "Role Test - logging"
            path: "roles/logging"
          - name: "Playbook Test - workstation"
            path: "playbooks/workstation"
          - name: "Playbook Test - vnc_box"
            path: "playbooks/vnc_box"

    steps:
      - name: Install Act dependencies
        if: ${{ env.ACT }}
        run: |
          apt-get update && apt-get install rsync sudo -y

      - name: Delete huge unnecessary tools folder
        if: env.ACT == ''
        shell: bash
        run: |
          echo "Initial disk space:"
          df -h
          rm -rf /opt/hostedtoolcache
          echo "Disk space after cleanup:"
          df -h

      - name: Checkout git repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          path: ${{ env.COLLECTION_PATH }}

      - name: Set up Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: '${{ env.COLLECTION_PATH }}/${{ env.REQUIREMENTS_FILE }}'

      - name: Cache Ansible collections
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: ~/.ansible/collections
          key: ${{ runner.os }}-ansible-${{ hashFiles('**/requirements.yml') }}

      - name: Install dependencies
        shell: bash
        run: |
          python3 -m pip install -r "${{ env.COLLECTION_PATH }}/${{ env.REQUIREMENTS_FILE }}"

      - name: Install galaxy dependencies
        working-directory: ${{ env.COLLECTION_PATH }}
        shell: bash
        run: |
          ansible-galaxy collection install -r requirements.yml
          ansible-galaxy install -r requirements.yml

      - name: Build and install collection locally
        working-directory: ${{ env.COLLECTION_PATH }}
        shell: bash
        run: |
          ansible-galaxy collection build --force
          ansible-galaxy collection install cowdogmoo-workstation-*.tar.gz -p ~/.ansible/collections --force --pre

      - name: Run molecule test
        working-directory: ${{ env.COLLECTION_PATH }}/${{ matrix.path }}
        shell: bash
        env:
          ANSIBLE_CONFIG: ${{ env.COLLECTION_PATH }}/ansible.cfg
        run: |
          set -e
          molecule --version
          molecule list

          if ! MOLECULE_DEBUG=1 molecule test; then
            echo "Molecule test failed. Collecting debug information..."

            echo "Docker containers:"
            docker ps -a

            echo "=== Docker Container Logs ==="
            while read -r container; do
              echo "=== Logs from container ${container} ==="
              docker logs "${container}" 2>&1
              echo "=== End logs for container ${container} ==="
            done < <(docker ps -q)

            echo "=== Molecule Logs ==="
            while IFS= read -r -d '' log; do
              echo "Contents of ${log}:"
              cat "${log}"
              echo "=== End of ${log} ==="
            done < <(find . -name '*.log' -print0)

            exit 1
          fi
